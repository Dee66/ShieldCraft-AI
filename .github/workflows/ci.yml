# Ensure Docker is available in CI before any Docker build/scan steps
---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  flow_commit:
    name: "Nox Orchestration: flow_commit"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
          sudo rm -rf /opt/hostedtoolcache/CodeQL /opt/hostedtoolcache/go /usr/local/share/powershell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo apt-get clean
          df -h
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-py3.11
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: pip install poetry
      - name: Install project dependencies
        run: poetry install --no-interaction --no-root --with dev
      - name: Run all checks via Nox (flow_commit)
        run: poetry run nox -s commit_flow

  docker_build_api:
    name: "Docker Build: API"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    if: >
      github.event_name == 'push' || github.event_name == 'pull_request'
      && (
        contains(github.event.head_commit.message, 'Dockerfile.api') ||
        contains(github.event.head_commit.message, 'src/') ||
        contains(github.event.head_commit.message, 'pyproject.toml') ||
        contains(github.event.head_commit.message, 'poetry.lock')
      )
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set image tag
        id: meta
        run: echo "image_tag=ghcr.io/${{ github.repository_owner }}/shieldcraft-api:${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push with BuildKit cache (API)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          target: final
          push: true
          tags: ${{ steps.meta.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
      - name: Export image tag
        id: export_tag
        run: echo "image_tag=${{ steps.meta.outputs.image_tag }}" >> $GITHUB_ENV

  docker_build_ingestion:
    name: "Docker Build: Ingestion"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    if: >
      github.event_name == 'push' || github.event_name == 'pull_request'
      && (
        contains(github.event.head_commit.message, 'Dockerfile.ingestion') ||
        contains(github.event.head_commit.message, 'src/') ||
        contains(github.event.head_commit.message, 'pyproject.toml') ||
        contains(github.event.head_commit.message, 'poetry.lock')
      )
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set image tag
        id: meta
        run: echo "image_tag=ghcr.io/${{ github.repository_owner }}/shieldcraft-ingestion:${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push with BuildKit cache (Ingestion)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.ingestion
          target: final
          push: true
          tags: ${{ steps.meta.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
      - name: Export image tag
        id: export_tag
        run: echo "image_tag=${{ steps.meta.outputs.image_tag }}" >> $GITHUB_ENV

  docker_build_main:
    name: "Docker Build: Main"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    if: >
      github.event_name == 'push' || github.event_name == 'pull_request'
      && (
        contains(github.event.head_commit.message, 'Dockerfile') ||
        contains(github.event.head_commit.message, 'src/') ||
        contains(github.event.head_commit.message, 'pyproject.toml') ||
        contains(github.event.head_commit.message, 'poetry.lock')
      )
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set image tag
        id: meta
        run: echo "image_tag=ghcr.io/${{ github.repository_owner }}/shieldcraft-main:${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push with BuildKit cache (Main)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: final
          push: true
          tags: ${{ steps.meta.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
      - name: Export image tag
        id: export_tag
        run: echo "image_tag=${{ steps.meta.outputs.image_tag }}" >> $GITHUB_ENV

  docker_scan_api:
    name: "Docker Scan: API"
    runs-on: ubuntu-latest
    needs: [docker_build_api]
    steps:
      - uses: actions/checkout@v4
      - name: Pull built image
        run: |
          docker pull "$IMAGE_TAG"
      - name: Docker Scan (API)
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image "$IMAGE_TAG"
          docker pull anchore/grype:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/grype:latest "$IMAGE_TAG"

  docker_scan_ingestion:
    name: "Docker Scan: Ingestion"
    runs-on: ubuntu-latest
    needs: [docker_build_ingestion]
    steps:
      - uses: actions/checkout@v4
      - name: Pull built image
        run: |
          docker pull "$IMAGE_TAG"
      - name: Docker Scan (Ingestion)
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image "$IMAGE_TAG"
          docker pull anchore/grype:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/grype:latest "$IMAGE_TAG"

  docker_scan_main:
    name: "Docker Scan: Main"
    runs-on: ubuntu-latest
    needs: [docker_build_main]
    steps:
      - uses: actions/checkout@v4
      - name: Pull built image
        run: |
          docker pull "$IMAGE_TAG"
      - name: Docker Scan (Main)
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image "$IMAGE_TAG"
          docker pull anchore/grype:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/grype:latest "$IMAGE_TAG"

# Fail fast: if any job fails, the workflow stops (default in GitHub Actions unless using a matrix with fail-fast: false)
