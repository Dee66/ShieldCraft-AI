# --- Base image for API service ---
# Using Chainguard Python (zero-known CVE, minimal, secure)
FROM cgr.dev/chainguard/python@sha256:f05174c45fa717309a5d504a976c12690eccd650efeac5221d1d53b32ff41e71 AS base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1
WORKDIR /app

# --- OS security updates ---
# Chainguard images are continuously updated and minimal, so explicit OS update is not required

# --- Dev stage ---
FROM base AS dev
# Install dev tools and dependencies, combine steps for smaller image
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    pip install --upgrade pip pipx && \
    pipx install poetry && \
    pipx ensurepath && \
    echo "[dev] Poetry and pipx installed"
COPY pyproject.toml poetry.lock ./
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    poetry install --with dev --no-interaction --no-ansi
ARG SKIP_LARGE_DOWNLOADS=0
RUN if [ "$SKIP_LARGE_DOWNLOADS" = "1" ]; then echo "Skipping large downloads in dev"; fi
COPY . .

# --- Staging stage ---
FROM base AS staging
COPY pyproject.toml poetry.lock ./
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    pip install --upgrade pip && \
    pip install poetry && \
    poetry install --only main --no-interaction --no-ansi && \
    poetry export -f requirements.txt --output requirements.txt --without-hashes && \
    pip install --no-cache-dir -r requirements.txt && \
    poetry env remove python || true
COPY . .
# Remove dev files, tests, docs, .env, and build artifacts
RUN rm -rf tests/ docs/ .git/ .github/ .vscode/ .env *.pyc *.pyo __pycache__/ || true
# Use a custom non-root user for security and explicit UID/GID
RUN useradd -u 10001 -m appuser && chown -R appuser /app
USER appuser

# --- Production stage ---
FROM staging AS prod


FROM cgr.dev/chainguard/python@sha256:f05174c45fa717309a5d504a976c12690eccd650efeac5221d1d53b32ff41e71 AS final
WORKDIR /app
COPY --from=prod /app /app
COPY --from=prod /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=prod /usr/local/bin /usr/local/bin
# Use custom non-root user for security
USER 10001
ARG ENV=prod
ENV ENV=${ENV}
# Healthcheck for orchestrators
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 CMD python -m src.api.main --healthcheck || exit 1
# Entrypoint for flexibility
ENTRYPOINT ["python"]
EXPOSE 8080
CMD ["-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8080"]

# --- Target selection ---
# docker build -f Dockerfile.api --target=dev --build-arg ENV=dev .
# docker build -f Dockerfile.api --target=staging --build-arg ENV=staging .
# docker build -f Dockerfile.api --target=final --build-arg ENV=prod .
