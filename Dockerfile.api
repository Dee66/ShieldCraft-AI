ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-slim AS base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1
WORKDIR /app

# --- OS security updates ---
# Chainguard images are continuously updated and minimal, so explicit OS update is not required

FROM base AS dev
ARG BUILDKIT_INLINE_CACHE=1
# Install dev tools and dependencies
RUN pip install --upgrade pip pipx && \
    pipx install poetry && \
    pipx ensurepath && \
    echo "[dev] Poetry and pipx installed"
COPY pyproject.toml poetry.lock ./
RUN poetry install --with dev --no-interaction --no-ansi
ARG SKIP_LARGE_DOWNLOADS=0
RUN if [ "$SKIP_LARGE_DOWNLOADS" = "1" ]; then echo "Skipping large downloads in dev"; fi
COPY src/ /app/src/

FROM base AS staging
ARG BUILDKIT_INLINE_CACHE=1
COPY pyproject.toml poetry.lock ./
RUN python -m pip install --upgrade pip
# Export requirements using Poetry (only main dependencies)
RUN pip install poetry && poetry export -f requirements.txt --output requirements.txt --without-hashes
RUN python -m pip install --no-cache-dir -r requirements.txt
COPY src/ /app/src/
RUN rm -rf tests/ docs/ .git/ .github/ .vscode/ .env *.pyc *.pyo __pycache__ /root/.cache/pip /root/.cache/pypoetry /root/.local/pipx
# Use a custom non-root user for security and explicit UID/GID
RUN useradd -u 10001 -m appuser
RUN chown -R appuser /app
USER appuser


FROM staging AS final
WORKDIR /app
USER 10001
ARG ENV=prod
ENV ENV=${ENV}
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 CMD python -m src.api.main --healthcheck || exit 1
ENTRYPOINT ["python"]
EXPOSE 8080
CMD ["-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8080"]

# --- Target selection ---
# docker build -f Dockerfile.api --target=dev --build-arg ENV=dev .
# docker build -f Dockerfile.api --target=staging --build-arg ENV=staging .
# docker build -f Dockerfile.api --target=final --build-arg ENV=prod .
